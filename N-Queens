bool check(vector<int> &save, int index, int pos)
{
    for(int i=0;i<save.size();i++) {
        if(abs(save[i]-pos)==abs(index-i)) return false;
    }
    return true;
}

void func(int index, int n, vector<bool> &used, vector<int> &save, vector<vector<string> >&res)
{
    if(index==n) {
        vector<string> row;
        for(int i=0;i<n;i++) {
            string str;
            for(int j=0;j<n;j++) {
                if (j==save[i]) str.append("Q");
                else str.append(".");
            }
            row.push_back(str);
        }
        res.push_back(row);
        return;
    }
    for(int i=0;i<n;i++) {
        if(!used[i] && check(save, index, i)) {
            save.push_back(i);
            used[i]=true;
            func(index+1, n, used, save, res);
            save.pop_back();
            used[i]=false;
        }
    }
}

class Solution {
public:
    vector<vector<string> > solveNQueens(int n) {
        vector<vector<string> >res;
        if(n==0) return res;
        vector<bool> used(n, 0);
        vector<int> save;
        func(0, n, used, save, res);
        return res;
    }
};

========================================================================================

bool check(int index, vector<int> &save)
{
    for(int i=0;i<save.size();i++) {
        if(abs(save[i]-index)==abs(int(save.size())-i)) return false;
    }
    return true;
}

void func(int n, vector<bool> &used, vector<int> &save, vector<vector<string> > &res)
{
    if (save.size()==n) {
        vector<string> row;
        for(int i=0;i<save.size();i++) {
            string tmp;
            for(int j=0;j<save[i];j++) tmp+='.';
            tmp+='Q';
            for(int j=save[i]+1;j<n;j++) tmp+='.';
            row.push_back(tmp);
        }
        res.push_back(row);
        return;
    }
    for(int i=0;i<n;i++) {
        if (!used[i] && check(i, save)) {
            used[i]=true;
            save.push_back(i);
            func(n, used, save, res);
            save.pop_back();
            used[i]=false;
        }
    }
}

class Solution {
public:
    vector<vector<string> > solveNQueens(int n) {
        vector<vector<string> >res;
        vector<int> save;
        vector<bool> used(n, 0);
        func(n, used, save, res);
        return res;
    }
};