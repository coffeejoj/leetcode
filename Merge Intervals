//============================================================================
// Given a collection of intervals, merge all overlapping intervals.
//
// For example,
// Given [1,3],[2,6],[8,10],[15,18],
// return [1,6],[8,10],[15,18].
//
// Complexity:
// O(n)
//============================================================================

struct Interval {
    int start;
    int end;
    Interval() : start(0), end(0) {}
    Interval(int s, int e) : start(s), end(e) {}
};

struct StartIncreasing {
    bool operator() (const Interval &a, const Interval &b) {
        return a.start < b.start;
    }
} start_increasing;

class Solution {
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        if (intervals.size()<2) return intervals;
        vector<Interval> res;
        sort(intervals.begin(), intervals.end(), start_increasing);
        for(int i=0;i<intervals.size();i++) {
            if (!res.empty() && intervals[i].start<=res.back().end) {
                res.back().end=max(res.back().end, intervals[i].end);
            } else res.push_back(intervals[i]);
        }
        return res;
    }
};