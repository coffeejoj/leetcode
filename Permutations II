void func(int index, vector<int> &num, vector<bool> &used, vector<int> &save, vector<vector<int> > &res)
{
    if(index==num.size()) {
        res.push_back(save);
        return;
    }
    for(int i=0;i<num.size();i++) {
        if(!used[i]) {
            used[i]=true;
            save.push_back(num[i]);
            func(index+1, num, used, save, res);
            save.pop_back();
            used[i]=false;
            while(i+1<num.size() && num[i]==num[i+1])i++;
        }
    }
}

class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        vector<vector<int> >res;
        if(num.size()==0) return res;
        vector<bool> used(num.size(),0);
        vector<int> save;
        sort(num.begin(), num.end());
        func(0, num, used, save, res);
    }
};

=======================================================================

void func(vector<int> &num, vector<bool> &used, vector<int> &save, vector<vector<int> > &res)
{
    if (save.size()==num.size()) {
        res.push_back(save);
        return;
    }
    for(int i=0;i<num.size();i++) {
        if (!used[i]) {
            used[i]=true;
            save.push_back(num[i]);
            func(num, used, save, res);
            save.pop_back();
            used[i]=false;
            while(i+1<num.size() && num[i]==num[i+1]) i++;
        }
    }
}

class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        vector<vector<int> > res;
        if(num.size()==0) return res;
        vector<bool> used(num.size(), 0);
        vector<int> save;
        sort(num.begin(), num.end());
        func(num, used, save, res);
        return res;
    }
};