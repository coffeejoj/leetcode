void func(vector<vector<char> >&board, int i, int j, int m, int n)
{
    if (board[i][j]!='O') return;
    queue<pair<int, int> > que;
    board[i][j]='D';
    que.push(make_pair(i,j));
    while(!que.empty()) {
        pair<int, int> t=que.front();
        que.pop();
        i=t.first; j=t.second;
        if (i-1>=0 && board[i-1][j]=='O') { board[i-1][j]='D'; que.push(make_pair(i-1, j));}
        if (j-1>=0 && board[i][j-1]=='O') { board[i][j-1]='D'; que.push(make_pair(i, j-1));}
        if (i+1<m && board[i+1][j]=='O') { board[i+1][j]='D'; que.push(make_pair(i+1, j));}
        if (j+1<n && board[i][j+1]=='O') { board[i][j+1]='D'; que.push(make_pair(i, j+1));}
    }
}

class Solution {
public:
    void solve(vector<vector<char> > &board) {
        if (board.size()==0) return;
        int m=board.size();
        int n=board[0].size();
        for(int i=0;i<m;i++) {
            func(board, i, 0, m, n);
            func(board, i, n-1, m, n);
        }
        for(int j=0;j<n;j++) {
            func(board, 0, j, m, n);
            func(board, m-1, j, m, m);
        }
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                else if (board[i][j] == 'D') board[i][j] = 'O';
            }
        }
    }
};