//============================================================================
// Given a digit string, return all possible letter combinations that the
// number could represent.
//
// Input:Digit string "23"
// Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
// Note:
// Although the above answer is in lexicographical order, your answer could be
// in any order you want.
//============================================================================

void func(int index, string &digits, map<string, string> &my_map, string save, vector<string> &res)
{
    if(index==digits.length()) {
        res.push_back(save);
        return;
    }
    for(int i=0;i<my_map[digits.substr(index,1)].length();i++) {
        func(index+1, digits, my_map, save+my_map[digits.substr(index,1)].substr(i,1), res);
    }
}

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        map<string, string> my_map;
        vector<string> res;
        string save="";
        my_map["2"]="abc";
        my_map["3"]="def";
        my_map["4"]="ghi";
        my_map["5"]="jkl";
        my_map["6"]="mno";
        my_map["7"]="pqrs";
        my_map["8"]="tuv";
        my_map["9"]="wxyz";
        func(0, digits, my_map, save, res);
        return res;
    }
};